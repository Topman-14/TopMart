generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String   @id @default(uuid())
  name        String
  userId      String
  sizes       Size[] @relation("StoreToSize")
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  products  Product[] @relation("StoreToProduct")
  colors      Color[] @relation("StoreToColor")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model user {
  id    String  @id
  email String  @unique(map: "User_email_key")
  name  String?
}

model Billboard {
  id          String   @id @default(uuid())
  storeId     String
  store       Store   @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  products    Product[] @relation("CategoryToProduct")
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@index([storeId])
   @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([storeId])
}
model Color {
  id        String   @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  products  Product[]
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([storeId])
}
model Product {
  id        String   @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String
  category     Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId    String
  size     Size @relation(fields: [sizeId], references: [id])
  colorId String
  color     Color @relation(fields: [colorId], references: [id])
  name      String
  price     Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


   @@index([storeId])
   @@index([sizeId])
   @@index([colorId])
   @@index([categoryId])
}

model Image {
  id String @id @default(uuid())
  productId String 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index (productId)
}